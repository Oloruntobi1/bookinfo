// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bookmerce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BookMerceClient is the client API for BookMerce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookMerceClient interface {
	AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*BookID, error)
	GetBook(ctx context.Context, in *BookID, opts ...grpc.CallOption) (*Book, error)
}

type bookMerceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookMerceClient(cc grpc.ClientConnInterface) BookMerceClient {
	return &bookMerceClient{cc}
}

func (c *bookMerceClient) AddBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*BookID, error) {
	out := new(BookID)
	err := c.cc.Invoke(ctx, "/bookmerce.BookMerce/AddBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookMerceClient) GetBook(ctx context.Context, in *BookID, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/bookmerce.BookMerce/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookMerceServer is the server API for BookMerce service.
// All implementations must embed UnimplementedBookMerceServer
// for forward compatibility
type BookMerceServer interface {
	AddBook(context.Context, *Book) (*BookID, error)
	GetBook(context.Context, *BookID) (*Book, error)
	mustEmbedUnimplementedBookMerceServer()
}

// UnimplementedBookMerceServer must be embedded to have forward compatible implementations.
type UnimplementedBookMerceServer struct {
}

func (UnimplementedBookMerceServer) AddBook(context.Context, *Book) (*BookID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookMerceServer) GetBook(context.Context, *BookID) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookMerceServer) mustEmbedUnimplementedBookMerceServer() {}

// UnsafeBookMerceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookMerceServer will
// result in compilation errors.
type UnsafeBookMerceServer interface {
	mustEmbedUnimplementedBookMerceServer()
}


func RegisterBookMerceServer(s grpc.ServiceRegistrar, srv BookMerceServer) {
	s.RegisterService(&_BookMerce_serviceDesc, srv)
}

func _BookMerce_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookMerceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookmerce.BookMerce/AddBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookMerceServer).AddBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookMerce_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookMerceServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookmerce.BookMerce/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookMerceServer).GetBook(ctx, req.(*BookID))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookMerce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bookmerce.BookMerce",
	HandlerType: (*BookMerceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBook",
			Handler:    _BookMerce_AddBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _BookMerce_GetBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookmerce/bookmerce.proto",
}
